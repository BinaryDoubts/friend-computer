'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactDOM = require('react-dom');

var Select = function (_React$PureComponent) {
  _inherits(Select, _React$PureComponent);

  function Select(props) {
    _classCallCheck(this, Select);

    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

    _this.onChange = _this.onChange.bind(_this);
    return _this;
  }

  Select.prototype.onChange = function onChange(e) {
    this.props.updateProps({ value: e.target.value });
  };

  Select.prototype.render = function render() {
    return _react2.default.createElement(
      'select',
      _extends({ onChange: this.onChange }, this.props),
      this.props.options.map(function (d) {
        if (typeof d === 'string') {
          return _react2.default.createElement(
            'option',
            { value: d },
            d
          );
        }
        return _react2.default.createElement(
          'option',
          { value: d.value },
          d.label || d.value
        );
      })
    );
  };

  return Select;
}(_react2.default.PureComponent);

Select.defaultProps = {
  options: []
};

exports.default = Select;